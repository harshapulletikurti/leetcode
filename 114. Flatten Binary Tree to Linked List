

Medium

3275

354

Add to List

Share
Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        
        if (root ==NULL)   // NULL Check
            return; 
        
        stack<TreeNode*> s;
        s.push(root);
        
        while (!s.empty()){
            TreeNode* p;
            TreeNode** pNext=NULL;
            
            p=s.top(); //assign
            s.pop();      //flush
            
            pNext=&root;
            
            if(p->right != NULL)
                s.push(p->right);
            if(p->left != NULL)
                s.push(p->left);
            
            if(!s.empty()){
              p->right=s.top();
              p->left=NULL; 
              // *pNext->right=s.top();
              // pNext=&((*pNext)->left) ;
              // *pNext->left=NULL ;
              
            }
            
        }
    }
};




 
