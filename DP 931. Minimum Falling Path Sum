https://leetcode.com/problems/minimum-falling-path-sum/submissions/

Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:

Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum underlined below:
[[2,1,3],      [[2,1,3],
 [6,5,4],       [6,5,4],
 [7,8,9]]       [7,8,9]]
Example 2:

Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is underlined below:
[[-19,57],
 [-40,-5]]
Example 3:

Input: matrix = [[-48]]
Output: -48

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        
        int n=matrix.size();
        
        if (n==0)
            return 0;
        
        vector<vector<int>> f;
        for(int i=0;i<n;i++){
            vector<int> a;   // to store the columns
            a.resize(n);
            f.push_back(a);  // For each row we will add a default 0 for all the given columns
        }
        
       
        
        for(int i=0;i<n;i++)
            f[n-1][i]=matrix[n-1][i];
        
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<n;j++){
                if(j==0){
                   f[i][j]=matrix[i][j]+min(f[i+1][j],f[i+1][j+1]);  
                   continue;
                }
                  
                else if(j==n-1){
                    f[i][j]=matrix[i][j]+min(f[i+1][j-1],f[i+1][j]);
                    continue; 
                }
                    
                else{
                    f[i][j]=matrix[i][j]+min(min(f[i+1][j-1],f[i+1][j]),f[i+1][j+1]);
                    continue;
                }
                    
            }
        }
        return *min_element(f.begin(),f.end());
        
    }
};
