https://leetcode.com/problems/implement-trie-prefix-tree/

Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.


Solution:

struct TrieNode{

     TrieNode *children[26];
     bool is_word;
};

class Trie {
public:
    
    TrieNode *root;
    /** Initialize your data structure here. */
    Trie() {
       root=new TrieNode();   //root is blank
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode *curr=root;   //asign a curr and point to root
        
        for (int i =0;i<word.size();i++){
            char c= word[i];
            int j=c-'a';
            
            TrieNode *child=curr->children[j];
            if (child == NULL){
                child= new TrieNode();
                curr->children[j]=child;
            }
            curr=child;
            
        }
        
        curr->is_word=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode *curr=root;
        for(int i=0;i<word.size();i++){
            char c=word[i];
            int j= c-'a';
            
            
            TrieNode *child=curr->children[j];
            if(child==NULL)
                return false;
            curr=child;
        }
       
        return curr->is_word;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
         TrieNode *curr=root;
         for(int i=0;i<prefix.size();i++){
            char c=prefix[i];
            int j= c-'a';
            
            
            TrieNode *child=curr->children[j];
            if(child==NULL)
                return false;
            curr=child;
         }
       
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
