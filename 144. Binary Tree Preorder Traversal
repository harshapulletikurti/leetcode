Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,2,3]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
Example 4:


Input: root = [1,2]
Output: [1,2]
Example 5:


Input: root = [1,null,2]
Output: [1,2]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Follow up:

Recursive solution is trivial, could you do it iteratively?

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //recursive approach
    void pre_1(TreeNode* root, vector<int> &r){  
        if (root==NULL)
            return;
        r.push_back(root->val);
        pre_1(root->left,r);
        pre_1(root->right,r);
        
    }
    
    //  Iterative approach (****Preferred******)
    void pre(TreeNode* root, vector<int> &r){
        if (root==NULL)
            return;
        stack<TreeNode*> s;
        
        s.push(root);
        while(!s.empty()){
            TreeNode* p=s.top() ; s.pop();
            r.push_back(p->val);  // visit
            if (p->right != NULL) 
                s.push(p->right);
            if (p->left != NULL) 
                s.push(p->left);
            
        }
    }
    vector<int> preorderTraversal(TreeNode* root) {
        
        vector<int> r;
        pre(root,r);
        return r;
        
    }
};
